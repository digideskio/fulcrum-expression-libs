!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r;r="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,r.turflinedistance=e()}}(function(){return function e(r,t,n){function o(a,u){if(!t[a]){if(!r[a]){var f="function"==typeof require&&require;if(!u&&f)return f(a,!0);if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var c=t[a]={exports:{}};r[a][0].call(c.exports,function(e){var t=r[a][1][e];return o(t?t:e)},c,c.exports,e,r,t,n)}return t[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,r,t){function n(e){return e*Math.PI/180}var o=e("turf-invariant");r.exports=function(e,r,t){o.featureOf(e,"Point","distance"),o.featureOf(r,"Point","distance");var i,a=e.geometry.coordinates,u=r.geometry.coordinates,f=n(u[1]-a[1]),s=n(u[0]-a[0]),c=n(a[1]),p=n(u[1]),d=Math.pow(Math.sin(f/2),2)+Math.pow(Math.sin(s/2),2)*Math.cos(c)*Math.cos(p),y=2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d));switch(t){case"miles":i=3960;break;case"kilometers":case"kilometres":i=6373;break;case"degrees":i=57.2957795;break;case"radians":i=1;break;case void 0:i=6373;break;default:throw new Error('unknown option given to "units"')}var l=i*y;return l}},{"turf-invariant":2}],2:[function(e,r,t){function n(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function o(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function i(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!o.geometry||o.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+o.geometry.type)}}r.exports.geojsonType=n,r.exports.collectionOf=i,r.exports.featureOf=o},{}],3:[function(e,r,t){var n=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};r.exports=function(e,r){if(!n(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return{type:"Feature",geometry:{type:"Point",coordinates:e},properties:r||{}}}},{}],"turf-line-distance":[function(e,r,t){var n=e("turf-distance"),o=e("turf-point");r.exports=function(e,r){var t;if("Feature"===e.type)t=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");t=e.geometry.coordinates}for(var i=0,a=0;a<t.length-1;a++)i+=n(o(t[a]),o(t[a+1]),r);return i}},{"turf-distance":1,"turf-point":3}]},{},[])("turf-line-distance")});

var turflinedistance = module.exports;
