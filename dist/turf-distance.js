!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.turfdistance=e()}}(function(){return function e(t,r,n){function o(a,u){if(!r[a]){if(!t[a]){var f="function"==typeof require&&require;if(!u&&f)return f(a,!0);if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var d=r[a]={exports:{}};t[a][0].call(d.exports,function(e){var r=t[a][1][e];return o(r?r:e)},d,d.exports,e,t,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){function n(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)}function o(e,t,r){if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)}function i(e,t,r){if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!o.geometry||o.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+o.geometry.type)}}t.exports.geojsonType=n,t.exports.collectionOf=i,t.exports.featureOf=o},{}],"turf-distance":[function(e,t,r){function n(e){return e*Math.PI/180}var o=e("turf-invariant");t.exports=function(e,t,r){o.featureOf(e,"Point","distance"),o.featureOf(t,"Point","distance");var i,a=e.geometry.coordinates,u=t.geometry.coordinates,f=n(u[1]-a[1]),s=n(u[0]-a[0]),d=n(a[1]),c=n(u[1]),p=Math.pow(Math.sin(f/2),2)+Math.pow(Math.sin(s/2),2)*Math.cos(d)*Math.cos(c),l=2*Math.atan2(Math.sqrt(p),Math.sqrt(1-p));switch(r){case"miles":i=3960;break;case"kilometers":case"kilometres":i=6373;break;case"degrees":i=57.2957795;break;case"radians":i=1;break;case void 0:i=6373;break;default:throw new Error('unknown option given to "units"')}var w=i*l;return w}},{"turf-invariant":1}]},{},[])("turf-distance")});

var turfdistance = module.exports;
