(function(e){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var r;if(typeof window!=="undefined"){r=window}else if(typeof global!=="undefined"){r=global}else if(typeof self!=="undefined"){r=self}else{r=this}r.turfdistance=e()}})(function(){var e,r,t;return function n(e,r,t){function o(a,f){if(!r[a]){if(!e[a]){var u=typeof require=="function"&&require;if(!f&&u)return u(a,!0);if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var d=r[a]={exports:{}};e[a][0].call(d.exports,function(r){var t=e[a][1][r];return o(t?t:r)},d,d.exports,n,e,r,t)}return r[a].exports}var i=typeof require=="function"&&require;for(var a=0;a<t.length;a++)o(t[a]);return o}({1:[function(e,r,t){r.exports.geojsonType=n;r.exports.collectionOf=i;r.exports.featureOf=o;function n(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r){throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}}function o(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||e.type!=="Feature"||!e.geometry){throw new Error("Invalid input to "+t+", Feature with geometry required")}if(!e.geometry||e.geometry.type!==r){throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}}function i(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||e.type!=="FeatureCollection"){throw new Error("Invalid input to "+t+", FeatureCollection required")}for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||o.type!=="Feature"||!o.geometry){throw new Error("Invalid input to "+t+", Feature with geometry required")}if(!o.geometry||o.geometry.type!==r){throw new Error("Invalid input to "+t+": must be a "+r+", given "+o.geometry.type)}}}},{}],"turf-distance":[function(e,r,t){var n=e("turf-invariant");r.exports=function(e,r,t){n.featureOf(e,"Point","distance");n.featureOf(r,"Point","distance");var i=e.geometry.coordinates;var a=r.geometry.coordinates;var f=o(a[1]-i[1]);var u=o(a[0]-i[0]);var s=o(i[1]);var d=o(a[1]);var c=Math.pow(Math.sin(f/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(s)*Math.cos(d);var p=2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c));var l;switch(t){case"miles":l=3960;break;case"kilometers":case"kilometres":l=6373;break;case"degrees":l=57.2957795;break;case"radians":l=1;break;case undefined:l=6373;break;default:throw new Error('unknown option given to "units"')}var v=l*p;return v};function o(e){return e*Math.PI/180}},{"turf-invariant":1}]},{},[])("turf-distance")});
var turfdistance = module.exports;
